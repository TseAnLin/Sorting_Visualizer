{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","Home.js","SortingVisualizer/Bubblesort.jsx","BubbleHome.js","SortingVisualizer/Heapsort.jsx","HeapHome.js","SortingVisualizer/Insertionsort.jsx","InsertionHome.js","SortingVisualizer/Quicksort.jsx","QuickHome.js","SortingVisualizer/Mergesort.jsx","MergeHome.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","isFinal","middleIdx","Math","floor","k","i","j","move","push","doMerge","getBubbleSortAnimations","idx","swap","doBubbleSort","getQuickSortAnimations","doQuickSort","left","right","standard","heapify","largest","pop","getHeapSortAnimations","createMaxHeap","heapSort","getInsertionSortAnimations","key","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","state","numberOfArray","this","resetArray","randomIntFromInterval","arrayBars","document","getElementsByClassName","len","style","backgroundColor","setState","barOneIdx","barTwoIdx","Height","color","barOneStyle","barTwoStyle","setTimeout","n","height","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","value","className","type","min","max","onChange","e","target","id","onClick","mergeSort","href","rel","class","width","map","React","Component","random","arrayOne","arrayTwo","Home","code","useState","language","setLanguage","codeRef","useRef","Container","Row","Col","md","event","codeElement","current","range","createRange","selectNode","window","getSelection","removeAllRanges","addRange","execCommand","ref","HeightOne","HeightTwo","bubbleSortedArray","bubbleSort","newOneHeight","newTwoHeight","final","heapSortedArray","HeapHome","oriColor","barIdx","newHeight","barStyle","selectionSortedArray","insertionSort","undefined","quickSortedArray","quickSort","Main","useEffect","fbasePage","ReactDOM","render","getElementById","Nav","variant","defaultActiveKey","border","fontWeight","Link","App","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ee36485.chunk.js","sourcesContent":["/*----------------MergeSort-----------------*/\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations, true);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n  isFinal\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations, false);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations, false);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations, isFinal);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n  isFinal\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  let move = 0;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once to change their color.\n    if (k > i) {\n      animations.push([i + move, j, -1, 1]);\n    }\n    else {\n      animations.push([i, j, -1, 1]);\n    }\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the value at index i in the auxiliary array.\n      if (k > i) {\n        animations.push([k, i + move, auxiliaryArray[i], 1]);\n      }\n      else {\n        animations.push([k, i, auxiliaryArray[i], 1]);\n      }\n      if (isFinal) {\n        animations.push([k, j, -1, 2]);\n      }\n      else {\n        animations.push([k, j, -1, 0]);\n      }\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    else {\n      move++;\n      // We overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n      animations.push([k, j, auxiliaryArray[j], 1]);\n      if (isFinal) {\n        animations.push([k, j, -1, 2]);\n      }\n      else {\n        animations.push([k, j, -1, 0]);\n      }\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once to change their color.\n    animations.push([i + move, i + move, -1, 1]);\n    // These are the values that we're comparing; we push them a second time to revert their color.\n    if (isFinal) {\n      animations.push([i + move, i + move, -1, 2]);\n    }\n    else {\n      animations.push([i + move, i + move, -1, 0]);\n    }\n    // We overwrite the value at index k in the original array with the value at index i in the auxiliary array.\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once to change their color.\n    animations.push([j, j, -1, 1]);\n    // These are the values that we're comparing; we push them a second time to revert their color.\n    if (isFinal) {\n      animations.push([k, j, -1, 2]);\n    }\n    else {\n      animations.push([j, j, -1, 0]);\n    }\n    // We overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n/*----------------BubbleSort-----------------*/\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doBubbleSort(array.length - 1, array, animations);\n  return animations;\n}\nfunction swap(array, i, j) {\n  let k = array[j];\n  array[j] = array[i];\n  array[i] = k;\n}\n\nfunction doBubbleSort(idx, mainArray, animations) {\n\n  while (idx > 0) {\n    for (let i = 0; i < idx; i++) {\n      animations.push([i, i + 1, 1, mainArray[i], mainArray[i + 1]]);\n      animations.push([i, i + 1, 2, mainArray[i], mainArray[i + 1]]);\n      if (mainArray[i] >= mainArray[i + 1]) {\n        animations.push([i, i + 1, 2, mainArray[i + 1], mainArray[i]]);\n        animations.push([i, i + 1, 1, mainArray[i + 1], mainArray[i]]);\n        swap(mainArray, i, i + 1);\n      }\n      else {\n        animations.push([i, i + 1, 1, mainArray[i], mainArray[i + 1]]);\n      }\n    }\n    animations.push([idx, idx, 3, mainArray[idx], mainArray[idx]]);\n    idx--;\n  }\n  animations.push([idx, idx, 3, mainArray[idx], mainArray[idx]]);\n}\n\n/*----------------QuickSort-----------------*/\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doQuickSort(array, animations, 0, array.length - 1);\n  for (let i = 0; i < array.length; i++) {\n    animations.push([i, array[i]]);\n  }\n  return animations;\n}\n\nfunction doQuickSort(mainArray, animations, left, right) {\n\n\n  if ((left >= 0) && (right < mainArray.length) && (right - left >= 1)) {\n    let i = left;\n    let j = right;\n    let standard = mainArray[left];\n    animations.push([left, left, 0, mainArray[left], mainArray[left]]);\n    while (i !== j) {\n      if (i !== left) {\n        animations.push([i, j, 2, mainArray[i], mainArray[j]]);\n      }\n      else {\n        animations.push([j, j, 2, mainArray[j], mainArray[j]]);\n      }\n      while ((mainArray[j] >= standard) && (i < j)) {\n        animations.push([j, j, 1, mainArray[j], mainArray[j]]);\n        j -= 1;\n        animations.push([j, j, 2, mainArray[j], mainArray[j]]);\n      }\n      while ((mainArray[i] <= standard) && (i < j)) {\n        if (i !== left) {\n          animations.push([i, i, 1, mainArray[i], mainArray[i]]);\n        }\n        i += 1;\n        animations.push([i, i, 2, mainArray[i], mainArray[i]]);\n      }\n      if (i < j) {\n        animations.push([i, j, 2, mainArray[j], mainArray[i]]);\n        animations.push([i, j, 1, mainArray[j], mainArray[i]]);\n        swap(mainArray, i, j);\n      }\n    }\n    animations.push([left, i, 2, standard, mainArray[i]]);\n    animations.push([left, i, 2, mainArray[i], standard]);\n    animations.push([left, i, 3, mainArray[i], standard]);\n    mainArray[left] = mainArray[i];\n    mainArray[i] = standard;\n    doQuickSort(mainArray, animations, left, i - 1);\n    doQuickSort(mainArray, animations, i + 1, right);\n\n  }\n  else {\n    animations.push([left, left, 3, mainArray[left], mainArray[left]]);\n    return;\n  }\n}\n\n\n/*----------------HeapSort-----------------*/\nfunction heapify(animations, array, i, length) {\n  let left = i * 2 + 1;\n  let right = i * 2 + 2;\n  let largest;\n  if (left <= length - 1 && array[left] >= array[i]) {\n    animations.push([i, left]);\n    animations.push([i, left]);\n    largest = left;\n  }\n  else {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    largest = i;\n  }\n  if (right <= length - 1 && array[largest] < array[right]) {\n    animations.pop();\n    animations.pop();\n    animations.push([i, right]);\n    animations.push([i, right]);\n    largest = right;\n  }\n  if (largest !== i) {\n    [array[i], array[largest]] = [array[largest], array[i]];\n    animations.push([i, array[i], largest, array[largest], 0]);\n    heapify(animations, array, largest, length);\n  } else {\n    animations.pop();\n    animations.pop();\n    //animations.push([i, array[i], i, array[i], 0]);\n  }\n}\n\nfunction createMaxHeap(animations, array, length) {\n  for (let i = Math.floor((length - 1) / 2); i >= 0; i--) {\n    heapify(animations, array, i, length);\n  }\n}\n\nfunction heapSort(animations, array, length) {\n  for (let i = (length - 1); i >= 0; i--) {\n    [array[0], array[i]] = [array[i], array[0]];\n    animations.push([0, i]);\n    animations.push([0, i]);\n    animations.push([0, array[0], i, array[i], 1]);\n    if (i === 0) break;\n    heapify(animations, array, 0, i);\n  }\n}\n\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  // MaxHeap\n  createMaxHeap(animations, array, array.length);\n  // Heap Sort\n  heapSort(animations, array, array.length);\n\n  return animations;\n}\n\n// --------------------------------- InsertionSort ---------------------------------\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n\n  for (let i = 0; i < array.length; i++) {\n    animations.push([i, i, 0]);\n    animations.push([i, i, 0]);\n    animations.push([i, array[i]]);\n    let key = array[i];\n    let j = i - 1;\n    //let shift = array[j];\n    while (key < array[j] && j >= 0) {\n      array[j + 1] = array[j];\n      array[j] = 0;\n      if (j === i - 1) {\n        animations.pop();\n        //animations.push([j + 1, array[j + 1]]);\n        animations.push([j + 1, 0]);\n      }\n\n      animations.push([j, j, 1]);\n      animations.push([j, j, 1]);\n      animations.push([j, array[j], j + 1, array[j + 1]]);\n      j--;\n    }\n    array[j + 1] = key;\n    if (j + 1 !== i) {\n      animations.push([j + 1, j + 1]);\n      animations.push([j + 1, j + 1]);\n      animations.push([j + 1, key]);\n    }\n  }\n  return animations;\n}","import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#14213D';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#FCA311';\n\nconst FINAL_COLOR = '#921AFF';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      numberOfArray: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArray; i++) {\n      array.push(randomIntFromInterval(5, 380));\n    }\n    var arrayBars = document.getElementsByClassName('array-bar');\n    var len = arrayBars.length;\n    for (var i = 0; i < len; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, Height, color] = animations[i];\n      if (Height === -1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        if (color === 1) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        else if (color === 0) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        else if (color === 2) {\n          setTimeout(() => {\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            barOneStyle.backgroundColor = FINAL_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n      else {\n        setTimeout(() => {\n          for (let n = barTwoIdx; n > barOneIdx; n--) {\n            const barOneStyle = arrayBars[n - 1].style;\n            const barTwoStyle = arrayBars[n].style;\n            barTwoStyle.height = barOneStyle.height;\n          }\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${Height}px`;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  onChange(value) {\n    this.setState({ numberOfArray: value });\n  }\n\n  render() {\n    const array = this.state.array;\n\n    return (\n      <div className=\"array-container\">\n        <div className=\"button\">\n          <p>{this.state.numberOfArray}</p>\n          <input type=\"range\" min=\"10\" max=\"100\" onChange={(e) => this.onChange(e.target.value)} />\n          <button className='btn' id=\"sort\" onClick={() => this.mergeSort()}>Sort</button>\n          <button className='btn' id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n        </div>\n        <div className=\"leetcode-container\">\n          <a href=\"https://leetcode.com/problemset/all/\" target=\"_blank\" rel=\"noreferrer\">\n            <button className=\"leetcode-button\">Practice in Leetcode</button>\n          </a>\n        </div>\n        <p class=\"title\">Main Page</p>\n        <div class=\"bar\" style={{ width: `${900 + NUMBER_OF_ARRAY_BARS * 2}px` }}>\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${900 / NUMBER_OF_ARRAY_BARS}px`\n              }}></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport './TextBlock.css';\r\nimport { useRef, onCopy } from 'react';\r\nimport './CodeBlock.css';\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n    const [language, setLanguage] = useState('python');\r\n    const codeRef = useRef(null);\r\n    const pythonCode = `type code hear`;\r\n    const cppCode = `go practice now`;\r\n    const jsCode = `nothing here`;\r\n\r\n    function handleCopyClick() {\r\n        const codeElement = codeRef.current;\r\n        if (codeElement) {\r\n            const range = document.createRange();\r\n            range.selectNode(codeElement);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            window.getSelection().removeAllRanges();\r\n            ;\r\n        }\r\n    }\r\n\r\n    function handleLanguageChange(event) {\r\n        setLanguage(event.target.value);\r\n    }\r\n\r\n    let code;\r\n    if (language === 'python') {\r\n        code = pythonCode;\r\n    } else if (language === 'javascript') {\r\n        code = jsCode;\r\n    } else if (language === 'cpp') {\r\n        code = cppCode;\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col >\r\n                    <SortingVisualizer></SortingVisualizer>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6} className='code'>\r\n                    <div className=\"code-block\">\r\n                        <select value={language} onChange={handleLanguageChange}>\r\n                            <option value=\"python\">Python</option>\r\n                            <option value=\"javascript\">JavaScript</option>\r\n                            <option value=\"cpp\">C++</option>\r\n                        </select>\r\n                        <button onClick={handleCopyClick}>Copy</button>\r\n                        <pre ref={codeRef} className={`language-${language}`}>\r\n                            {code}\r\n                        </pre>\r\n                    </div>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <div className=\"TextBlock\"  >\r\n                        <Row>\r\n                            <div id=\"text-block\">\r\n                                <h2>Description</h2>\r\n                                <p>Merge Sort that divides the data structure recursively until the subsequences contain only one element. At this point, the subsequences get merged and ordered sequentially. To do so, the algorithm progressively builds the sorted sublist by adding each time the minimum element of the next two unsorted subsequences until there is only one sublist remaining. This will be the sorted data structure</p>\r\n                            </div>\r\n                        </Row>\r\n                        <Row>\r\n                            <div id=\"text-block-2\" >\r\n                                <h3>Complexity</h3>\r\n                                <p>Average:O(n × log n)</p>\r\n                                <p>Best:O(n × log n)</p>\r\n                                <p>Worst:O(n × log n)</p>\r\n                                <p>Space:O(n)</p>\r\n                            </div>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","import React from 'react';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 3;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#cbaa70';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#28FF28';\n\nconst FINAL_COLOR = '#921AFF';\n\nconst STARNDARD_COLOR = '#F9F900';\n\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      numberOfArray: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArray; i++) {\n      array.push(randomIntFromInterval(5, 380));\n    }\n    var arrayBars = document.getElementsByClassName('array-bar');\n    var len = arrayBars.length;\n\n    for (var i = 0; i < len; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n    this.setState({ array });\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, color, HeightOne, HeightTwo] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if (color === 1) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n          barTwoStyle.height = `${HeightTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (color === 2) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n          barTwoStyle.height = `${HeightTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (color === 3) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = FINAL_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, bubbleSortedArray));\n    }\n  }\n\n  onChange(value) {\n    this.setState({ numberOfArray: value });\n  }\n\n  render() {\n    const array = this.state.array;\n\n    return (\n      <div className=\"array-container\">\n        <div class=\"button\">\n          <p>{this.state.numberOfArray}</p>\n          <input type=\"range\" min=\"10\" max=\"100\" onChange={(e) => this.onChange(e.target.value)} />\n          <button class=\"btn\" id=\"sort\" onClick={() => this.bubbleSort()}>Sort</button>\n          <button class=\"btn\" id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n        </div>\n        <div className=\"leetcode-container\">\n          <a href=\"https://leetcode.com/problemset/all/\" target=\"_blank\" rel=\"noreferrer\">\n            <button className=\"leetcode-button\">Practice in Leetcode</button>\n          </a>\n        </div>\n        <p class=\"title\">Bubble Sort</p>\n        <div class=\"bar\" style={{ width: `${900 + NUMBER_OF_ARRAY_BARS * 2}px` }}>\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${900 / NUMBER_OF_ARRAY_BARS}px`\n              }}></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\r\nimport Bubblesort from './SortingVisualizer/Bubblesort';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport './TextBlock.css';\r\nimport { useRef, onCopy } from 'react';\r\nimport './CodeBlock.css';\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n    const [language, setLanguage] = useState('python');\r\n    const codeRef = useRef(null);\r\n    const pythonCode = `def bubbleSort(arr):\r\n    n = len(arr)\r\n    for i in range(n-1):\r\n        for j in range(0, n-i-1):\r\n            if arr[j] > arr[j+1]:\r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n\r\n`;\r\n    const jsCode = `\r\n    \r\nfunction bubbleSort(arr) {\r\n    for(var i = 0; i < arr.length; i++) {\r\n        for(var j = 0; j < ( arr.length - i -1 ); j++) {\r\n            if(arr[j] > arr[j+1]) {\r\n              var temp = arr[j]\r\n              arr[j] = arr[j + 1]\r\n              arr[j+1] = temp\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n    const cppCode = `\r\n    void swap(int *xp, int *yp) {\r\n        int temp = *xp;\r\n        *xp = *yp;\r\n        *yp = temp;\r\n    }\r\n    \r\n    \r\n    void bubbleSort(int arr[], int n) {\r\n        int i, j;\r\n        for (i = 0; i < n-1; i++)\r\n            for (j = 0; j < n-i-1; j++)\r\n                if (arr[j] > arr[j+1])\r\n                    swap(&arr[j], &arr[j+1]);\r\n    }\r\n    }`;\r\n\r\n    function handleCopyClick() {\r\n        const codeElement = codeRef.current;\r\n        if (codeElement) {\r\n            const range = document.createRange();\r\n            range.selectNode(codeElement);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            window.getSelection().removeAllRanges();\r\n\r\n        }\r\n    }\r\n\r\n    function handleLanguageChange(event) {\r\n        setLanguage(event.target.value);\r\n    }\r\n\r\n    let code;\r\n    if (language === 'python') {\r\n        code = pythonCode;\r\n    } else if (language === 'javascript') {\r\n        code = jsCode;\r\n    } else if (language === 'cpp') {\r\n        code = cppCode;\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col >\r\n                    <Bubblesort></Bubblesort>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6} className='code'>\r\n                    <div className=\"code-block\">\r\n                        <select value={language} onChange={handleLanguageChange}>\r\n                            <option value=\"python\">Python</option>\r\n                            <option value=\"javascript\">JavaScript</option>\r\n                            <option value=\"cpp\">C++</option>\r\n                        </select>\r\n                        <button onClick={handleCopyClick}>Copy</button>\r\n                        <pre ref={codeRef} className={`language-${language}`}>\r\n                            {code}\r\n                        </pre>\r\n                    </div>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <div className=\"TextBlock\"  >\r\n                        <row>\r\n                            <div id=\"text-block\">\r\n                                <h2>Description</h2>\r\n                                <p>Bubblesort that divides the data structure recursively until the subsequences contain only one element. At this point, the subsequences get merged and ordered sequentially. To do so, the algorithm progressively builds the sorted sublist by adding each time the minimum element of the next two unsorted subsequences until there is only one sublist remaining. This will be the sorted data structure</p>\r\n                            </div>\r\n                        </row>\r\n                        <row>\r\n                            <div id=\"text-block-2\" >\r\n                                <h3>Complexity</h3>\r\n                                <p>Average:O(n ×  n)</p>\r\n                                <p>Best:O(n )</p>\r\n                                <p>Worst:O(n n ×  n)</p>\r\n                                <p>Space:O(1)</p>\r\n                            </div>\r\n                        </row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","import React from 'react';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 5;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#cbaa70';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#28FF28';\n\nconst FINAL_COLOR = '#921AFF';\n\nconst STARNDARD_COLOR = '#F9F900';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      numberOfArray: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArray; i++) {\n      array.push(randomIntFromInterval(5, 380));\n    }\n    var arrayBars = document.getElementsByClassName('array-bar');\n    var len = arrayBars.length;\n\n    for (var i = 0; i < len; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n    this.setState({ array });\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barOneIdx, newOneHeight, barTwoIdx, newTwoHeight, final] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.height = `${newOneHeight}px`;\n          barTwoStyle.height = `${newTwoHeight}px`;\n          if (final) {\n            barTwoStyle.backgroundColor = FINAL_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const heapSortedArray = getHeapSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, heapSortedArray));\n    }\n  }\n\n  //Change number of array\n  onChange(value) {\n    this.setState({ numberOfArray: value });\n  }\n\n  render() {\n    const array = this.state.array;\n\n    return (\n      <div className=\"array-container\">\n        <div class=\"button\">\n          <p>{this.state.numberOfArray}</p>\n          <input type=\"range\" min=\"10\" max=\"100\" onChange={(e) => this.onChange(e.target.value)} />\n          <button class=\"btn\" id=\"sort\" onClick={() => this.heapSort()}>Sort</button>\n          <button class=\"btn\" id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n        </div>\n        <div className=\"leetcode-container\">\n          <a href=\"https://leetcode.com/problems/sort-an-array/description/\" target=\"_blank\" rel=\"noreferrer\">\n            <button className=\"leetcode-button\">Practice in Leetcode</button>\n          </a>\n        </div>\n        <p class=\"title\">Heap Sort</p>\n        <div class=\"bar\" style={{ width: `${900 + NUMBER_OF_ARRAY_BARS * 2}px` }}>\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${900 / NUMBER_OF_ARRAY_BARS}px`\n              }}></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport './TextBlock.css';\r\nimport { useRef, onCopy } from 'react';\r\nimport './CodeBlock.css';\r\nimport Heapsort from './SortingVisualizer/Heapsort.jsx';\r\n\r\n\r\nfunction HeapHome() {\r\n    const [language, setLanguage] = useState('python');\r\n    const codeRef = useRef(null);\r\n    const pythonCode = `\r\n    def heapify(arr, n, i):\r\n      largest = i\r\n      l = 2 * i + 1\r\n      r = 2 * i + 2\r\n    \r\n      if l < n and arr[i] < arr[l]:\r\n          largest = l\r\n    \r\n      if r < n and arr[largest] < arr[r]:\r\n          largest = r\r\n    \r\n      if largest != i:\r\n          arr[i], arr[largest] = arr[largest], arr[i]\r\n          heapify(arr, n, largest)\r\n    \r\n    \r\n    def heapSort(arr):\r\n      n = len(arr)\r\n    \r\n      for i in range(n//2, -1, -1):\r\n          heapify(arr, n, i)\r\n    \r\n      for i in range(n-1, 0, -1):\r\n          arr[i], arr[0] = arr[0], arr[i]\r\n    \r\n          heapify(arr, i, 0)\r\n    \r\n`;\r\n    const jsCode = `\r\n\r\n    function heapSort(array) {\r\n        let size = array.length\r\n      \r\n        for (let i = Math.floor(size / 2 - 1); i >= 0; i--)\r\n          heapify(array, size, i)\r\n      \r\n        for (let i = size - 1; i >= 0; i--) {\r\n          let temp = array[0]\r\n          array[0] = array[i]\r\n          array[i] = temp\r\n          heapify(array, i, 0)\r\n        }\r\n      }\r\n      \r\n      function heapify(array, size, i) {\r\n        let max = i\r\n        let left = 2 * i + 1\r\n        let right = 2 * i + 2\r\n      \r\n        if (left < size && array[left] > array[max])\r\n          max = left\r\n      \r\n        if (right < size && array[right] > array[max])\r\n          max = right\r\n      \r\n        if (max != i) {\r\n          let temp = array[i]\r\n          array[i] = array[max]\r\n          array[max] = temp\r\n      \r\n          heapify(array, size, max)\r\n        }\r\n      }\r\n      \r\n`;\r\n    const cppCode = `void heapify(int arr[], int n, int i) {\r\n        int largest = i;\r\n        int left = 2 * i + 1;\r\n        int right = 2 * i + 2;\r\n    \r\n        if (left < n && arr[left] > arr[largest])\r\n          largest = left;\r\n    \r\n        if (right < n && arr[right] > arr[largest])\r\n          largest = right;\r\n    \r\n        if (largest != i) {\r\n          swap(arr[i], arr[largest]);\r\n          heapify(arr, n, largest);\r\n        }\r\n    }\r\n    \r\n    void heapSort(int arr[], int n) {\r\n        for (int i = n / 2 - 1; i >= 0; i--)\r\n          heapify(arr, n, i);\r\n    \r\n        for (int i = n - 1; i >= 0; i--) {\r\n          swap(arr[0], arr[i]);\r\n          heapify(arr, i, 0);\r\n        }\r\n    }\r\n    `;\r\n\r\n    function handleCopyClick() {\r\n        const codeElement = codeRef.current;\r\n        if (codeElement) {\r\n            const range = document.createRange();\r\n            range.selectNode(codeElement);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n    }\r\n\r\n    function handleLanguageChange(event) {\r\n        setLanguage(event.target.value);\r\n    }\r\n\r\n    let code;\r\n    if (language === 'python') {\r\n        code = pythonCode;\r\n    } else if (language === 'javascript') {\r\n        code = jsCode;\r\n    } else if (language === 'cpp') {\r\n        code = cppCode;\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col >\r\n                    <Heapsort></Heapsort>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6} className='code'>\r\n                    <div className=\"code-block\">\r\n                        <select value={language} onChange={handleLanguageChange}>\r\n                            <option value=\"python\">Python</option>\r\n                            <option value=\"javascript\">JavaScript</option>\r\n                            <option value=\"cpp\">C++</option>\r\n                        </select>\r\n                        <button onClick={handleCopyClick}>Copy</button>\r\n                        <pre ref={codeRef} className={`language-${language}`}>\r\n                            {code}\r\n                        </pre>\r\n                    </div>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <div className=\"TextBlock\"  >\r\n                        <row>\r\n                            <div id=\"text-block\">\r\n                                <h2>Description</h2>\r\n                                <p>Heap Sort is an in-place iterative sorting algorithm based on auxiliary data structures called heap. It's less efficient than algorithm with the same time complexity and it's not suitable for data structures with few elements.\r\n\r\n                                    The heap is a data structure representable as a binary tree, where each node has a value bigger or equal to its children. Consequently, the root will hold the maximum value.</p>\r\n                            </div>\r\n                        </row>\r\n                        <row>\r\n                            <div id=\"text-block-2\" >\r\n                                <h3>Complexity</h3>\r\n                                <p>Average:O(n × n)</p>\r\n                                <p>Best:O(n × log n )</p>\r\n                                <p>Worst:O(n × log n)</p>\r\n                                <p>Space:O(1)</p>\r\n                            </div>\r\n                        </row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HeapHome;\r\n\r\n\r\n\r\n","import React from 'react';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 3;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#cbaa70';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#28FF28';\n\nconst FINAL_COLOR = '#921AFF';\n\nconst STARNDARD_COLOR = '#F9F900';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      numberOfArray: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArray; i++) {\n      array.push(randomIntFromInterval(5, 380));\n    }\n    var arrayBars = document.getElementsByClassName('array-bar');\n    var len = arrayBars.length;\n\n    for (var i = 0; i < len; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n    this.setState({ array });\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx, oriColor] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        //const barTwoStyle = arrayBars[barTwoIdx].style;\n        const CHANHE_COLOR = oriColor === 1 ? FINAL_COLOR : PRIMARY_COLOR;\n\n        const color = i % 3 === 0 ? SECONDARY_COLOR : CHANHE_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          //barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (animations[i].length === 2) {\n        const [barIdx, newHeight] = animations[i];\n        const barStyle = arrayBars[barIdx].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n          barStyle.backgroundColor = FINAL_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barOneIdx, newOneHeight, barTwoIdx, newTwoHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.height = `${newOneHeight}px`;\n          barTwoStyle.height = `${newTwoHeight}px`;\n          barOneStyle.backgroundColor = FINAL_COLOR;\n          barTwoStyle.backgroundColor = FINAL_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const selectionSortedArray = getInsertionSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, selectionSortedArray));\n    }\n  }\n\n  onChange(value) {\n    this.setState({ numberOfArray: value });\n  }\n\n  render() {\n    const array = this.state.array;\n    return (\n      <div className=\"array-container\">\n        <div class=\"button\">\n          <p>{this.state.numberOfArray}</p>\n          <input type=\"range\" min=\"10\" max=\"100\" onChange={(e) => this.onChange(e.target.value)} />\n          <button class=\"btn\" id=\"sort\" onClick={() => this.insertionSort()}>Sort</button>\n          <button class=\"btn\" id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n        </div>\n        <div className=\"leetcode-container\">\n          <a href=\"https://leetcode.com/problems/insertion-sort-list/\" target=\"_blank\" rel=\"noreferrer\">\n            <button className=\"leetcode-button\">Practice in Leetcode</button>\n          </a>\n        </div>\n        <p class=\"title\">Insertion Sort</p>\n        <div class=\"bar\" style={{ width: `${900 + NUMBER_OF_ARRAY_BARS * 2}px` }}>\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${900 / NUMBER_OF_ARRAY_BARS}px`\n              }}></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\r\nimport Insertionsort from './SortingVisualizer/Insertionsort';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport './TextBlock.css';\r\nimport { useRef, onCopy } from 'react';\r\nimport './CodeBlock.css';\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n    const [language, setLanguage] = useState('python');\r\n    const codeRef = useRef(null);\r\n    const pythonCode = `\r\n    def insertionSort(arr):\r\n        for i in range(1, len(arr)):\r\n            key = arr[i]\r\n            j = i-1\r\n            while j >= 0 and key < arr[j] :\r\n                    arr[j + 1] = arr[j]\r\n                    j -= 1\r\n            arr[j + 1] = key\r\n`;\r\n    const jsCode = `\r\n    function insertionSort(arr, n)\r\n    {\r\n        let i, key, j;\r\n        for (i = 1; i < n; i++)\r\n        {\r\n            key = arr[i];\r\n            j = i - 1;\r\n    \r\n            while (j >= 0 && arr[j] > key)\r\n            {\r\n                arr[j + 1] = arr[j];\r\n                j = j - 1;\r\n            }\r\n            arr[j + 1] = key;\r\n        }\r\n    }\r\n`;\r\n    const cppCode = `void insertionSort(int arr[], int n)\r\n    {\r\n        int i, key, j;\r\n        for (i = 1; i < n; i++)\r\n        {\r\n            key = arr[i];\r\n            j = i - 1;\r\n    \r\n            while (j >= 0 && arr[j] > key)\r\n            {\r\n                arr[j + 1] = arr[j];\r\n                j = j - 1;\r\n            }\r\n            arr[j + 1] = key;\r\n        }\r\n    }`;\r\n\r\n    function handleCopyClick() {\r\n        const codeElement = codeRef.current;\r\n        if (codeElement) {\r\n            const range = document.createRange();\r\n            range.selectNode(codeElement);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n    }\r\n\r\n    function handleLanguageChange(event) {\r\n        setLanguage(event.target.value);\r\n    }\r\n\r\n    let code;\r\n    if (language === 'python') {\r\n        code = pythonCode;\r\n    } else if (language === 'javascript') {\r\n        code = jsCode;\r\n    } else if (language === 'cpp') {\r\n        code = cppCode;\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col >\r\n                    <Insertionsort></Insertionsort>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6} className='code'>\r\n                    <div className=\"code-block\">\r\n                        <select value={language} onChange={handleLanguageChange}>\r\n                            <option value=\"python\">Python</option>\r\n                            <option value=\"javascript\">JavaScript</option>\r\n                            <option value=\"cpp\">C++</option>\r\n                        </select>\r\n                        <button onClick={handleCopyClick}>Copy</button>\r\n                        <pre ref={codeRef} className={`language-${language}`}>\r\n                            {code}\r\n                        </pre>\r\n                    </div>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <div className=\"TextBlock\"  >\r\n                        <row>\r\n                            <div id=\"text-block\">\r\n                                <h2>Description</h2>\r\n                                <p>Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It's less performant than advanced sorting algorithms, but it can still have some advantages: it's really easy to implement and it's efficient on small data structures almost sorted</p>\r\n                            </div>\r\n                        </row>\r\n                        <row>\r\n                            <div id=\"text-block-2\" >\r\n                                <h3>Complexity</h3>\r\n                                <p>Average:O(n×n)</p>\r\n                                <p>Best:O(n)</p>\r\n                                <p>Worst:O(n ×  n)</p>\r\n                                <p>Space:O(1)</p>\r\n                            </div>\r\n                        </row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","import React from 'react';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 5;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#cbaa70';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#28FF28';\n\nconst FINAL_COLOR = '#921AFF';\n\nconst STARNDARD_COLOR = '#F9F900';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      numberOfArray: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArray; i++) {\n      array.push(randomIntFromInterval(5, 380));\n    }\n    var arrayBars = document.getElementsByClassName('array-bar');\n    var len = arrayBars.length;\n\n    for (var i = 0; i < len; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n    this.setState({ array });\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      if (animations[i][3] === undefined)\n        break;\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, color, HeightOne, HeightTwo] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if (color === 0) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = STARNDARD_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (color === 1) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n          barTwoStyle.height = `${HeightTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (color === 2) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n          barTwoStyle.height = `${HeightTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (color === 3) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = FINAL_COLOR;\n          barOneStyle.height = `${HeightOne}px`;\n          barTwoStyle.height = `${HeightTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const quickSortedArray = getQuickSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n    }\n  }\n\n  onChange(value) {\n    this.setState({ numberOfArray: value });\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        <div class=\"button\">\n          <p>{this.state.numberOfArray}</p>\n          <input type=\"range\" min=\"10\" max=\"100\" onChange={(e) => this.onChange(e.target.value)} />\n          <button class=\"btn\" id=\"sort\" onClick={() => this.quickSort()}>Sort</button>\n          <button class=\"btn\" id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n        </div>\n        <div className=\"leetcode-container\">\n          <a href=\"https://leetcode.com/problems/sort-an-array/description/\" target=\"_blank\" rel=\"noreferrer\">\n            <button className=\"leetcode-button\">Practice in Leetcode</button>\n          </a>\n        </div>\n        <p class=\"title\">Quick Sort</p>\n        <div class=\"bar\" style={{ width: `${900 + NUMBER_OF_ARRAY_BARS * 2}px` }}>\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${900 / NUMBER_OF_ARRAY_BARS}px`\n              }}></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\r\nimport Quicksort from './SortingVisualizer/Quicksort';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport './TextBlock.css';\r\nimport { useRef, onCopy } from 'react';\r\nimport './CodeBlock.css';\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n    const [language, setLanguage] = useState('python');\r\n    const codeRef = useRef(null);\r\n    const pythonCode = `def partition(array, start, end):\r\n    pivot = array[start]\r\n    low = start + 1\r\n    high = end\r\n\r\n    while True:\r\n        while low <= high and array[high] >= pivot:\r\n            high = high - 1\r\n\r\n        while low <= high and array[low] <= pivot:\r\n            low = low + 1\r\n\r\n        if low <= high:\r\n            array[low], array[high] = array[high], array[low]\r\n        else:\r\n            break\r\n\r\n    array[start], array[high] = array[high], array[start]\r\n\r\n    return high\r\n\r\ndef quick_sort(array, start, end):\r\n    if start >= end:\r\n        return\r\n\r\n    p = partition(array, start, end)\r\n    quick_sort(array, start, p-1)\r\n    quick_sort(array, p+1, end)\r\n`;\r\n    const jsCode = `\r\n    function quickSort(array, start, end) {\r\n        if (start === undefined) {\r\n          start = 0;\r\n          end = array.length - 1;\r\n        } else if (start >= end) {\r\n          return array;\r\n        }\r\n        var rStart = start, rEnd = end;\r\n        var pivot = array[Math.floor(Math.random() * (end - start + 1) + start)];\r\n        while (start < end) {\r\n          while (array[start] <= pivot) start++;\r\n          while (array[end] > pivot) end--;\r\n          if (start < end) {\r\n            var temp = array[start];\r\n            array[start] = array[end];\r\n            array[end] = temp;\r\n          }\r\n        }\r\n        quickSort(array, rStart, start - 1);\r\n        quickSort(array, start, rEnd);\r\n      }\r\n`;\r\n    const cppCode = `void swap(int* a, int* b)\r\n    {\r\n        int t = *a;\r\n        *a = *b;\r\n        *b = t;\r\n    }\r\n    \r\n    int partition (int arr[], int low, int high)\r\n    {\r\n        int pivot = arr[high];\r\n        int i = (low - 1);\r\n    \r\n        for (int j = low; j <= high- 1; j++)\r\n        {\r\n            if (arr[j] <= pivot)\r\n            {\r\n                i++;\r\n                swap(&arr[i], &arr[j]);\r\n            }\r\n        }\r\n        swap(&arr[i + 1], &arr[high]);\r\n        return (i + 1);\r\n    }\r\n    \r\n    void quickSort(int arr[], int low, int high)\r\n    {\r\n        if (low < high)\r\n        {\r\n            int pivot = partition(arr, low, high);\r\n    \r\n            quickSort(arr, low, pivot - 1);\r\n            quickSort(arr, pivot + 1, high);\r\n        }\r\n    }`;\r\n\r\n    function handleCopyClick() {\r\n        const codeElement = codeRef.current;\r\n        if (codeElement) {\r\n            const range = document.createRange();\r\n            range.selectNode(codeElement);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n    }\r\n\r\n    function handleLanguageChange(event) {\r\n        setLanguage(event.target.value);\r\n    }\r\n\r\n    let code;\r\n    if (language === 'python') {\r\n        code = pythonCode;\r\n    } else if (language === 'javascript') {\r\n        code = jsCode;\r\n    } else if (language === 'cpp') {\r\n        code = cppCode;\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col >\r\n                    <Quicksort></Quicksort>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6} className='code'>\r\n                    <div className=\"code-block\">\r\n                        <select value={language} onChange={handleLanguageChange}>\r\n                            <option value=\"python\">Python</option>\r\n                            <option value=\"javascript\">JavaScript</option>\r\n                            <option value=\"cpp\">C++</option>\r\n                        </select>\r\n                        <button onClick={handleCopyClick}>Copy</button>\r\n                        <pre ref={codeRef} className={`language-${language}`}>\r\n                            {code}\r\n                        </pre>\r\n                    </div>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <div className=\"TextBlock\"  >\r\n                        <row>\r\n                            <div id=\"text-block\">\r\n                                <h2>Description</h2>\r\n                                <p>Quick Sort is a sorting algorithm based on splitting the data structure in smaller partitions and sort them recursively until the data structure is sorted.\r\n\r\n                                    This division in partitions is done based on an element, called pivot: all the elements bigger than the pivot get placed on the right side of the structure, the smaller ones to the left, creating two partitions. Next, this procedure gets applied recursively to the two partitions and so on.</p>\r\n                            </div>\r\n                        </row>\r\n                        <row>\r\n                            <div id=\"text-block-2\" >\r\n                                <h3>Complexity</h3>\r\n                                <p>Average:O(n × log n)</p>\r\n                                <p>Best:O(n × log n)</p>\r\n                                <p>Worst:O(n ×  n)</p>\r\n                                <p>Space:O(n)</p>\r\n                            </div>\r\n                        </row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 5;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#cbaa70';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#28FF28';\n\nconst FINAL_COLOR = '#921AFF';\n\nconst STARNDARD_COLOR = '#F9F900';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      numberOfArray: NUMBER_OF_ARRAY_BARS,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.numberOfArray; i++) {\n      array.push(randomIntFromInterval(5, 380));\n    }\n    var arrayBars = document.getElementsByClassName('array-bar');\n    var len = arrayBars.length;\n    for (var i = 0; i < len; i++) {\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, Height, color] = animations[i];\n      if (Height === -1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        if (color === 1) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        else if (color === 0) {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        else if (color === 2) {\n          setTimeout(() => {\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\n            barOneStyle.backgroundColor = FINAL_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n      else {\n        setTimeout(() => {\n          for (let n = barTwoIdx; n > barOneIdx; n--) {\n            const barOneStyle = arrayBars[n - 1].style;\n            const barTwoStyle = arrayBars[n].style;\n            barTwoStyle.height = barOneStyle.height;\n          }\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barOneStyle.height = `${Height}px`;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  onChange(value) {\n    this.setState({ numberOfArray: value });\n  }\n\n  render() {\n    const array = this.state.array;\n\n    return (\n      <div className=\"array-container\">\n        <div class=\"button\">\n          <p>{this.state.numberOfArray}</p>\n          <input type=\"range\" min=\"10\" max=\"100\" onChange={(e) => this.onChange(e.target.value)} />\n          <button class=\"btn\" id=\"sort\" onClick={() => this.mergeSort()}>Sort</button>\n          <button class=\"btn\" id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n        </div>\n        <div className=\"leetcode-container\">\n          <a href=\"https://leetcode.com/tag/merge-sort/\" target=\"_blank\" rel=\"noreferrer\">\n            <button className=\"leetcode-button\">Practice in Leetcode</button>\n          </a>\n        </div>\n        <p class=\"title\">Merge Sort</p>\n        <div class=\"bar\" style={{ width: `${900 + NUMBER_OF_ARRAY_BARS * 2}px` }}>\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${900 / NUMBER_OF_ARRAY_BARS}px`\n              }}></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\r\nimport Mergesort from './SortingVisualizer/Mergesort';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport './TextBlock.css';\r\nimport { useRef, onCopy } from 'react';\r\nimport './CodeBlock.css';\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n    const [language, setLanguage] = useState('python');\r\n    const codeRef = useRef(null);\r\n    const pythonCode = `def mergeSort(arr):\r\n    if len(arr) > 1:\r\n        mid = len(arr)//2\r\n        L = arr[:mid]\r\n        R = arr[mid:]\r\n\r\n        mergeSort(L)\r\n        mergeSort(R)\r\n\r\n        i = j = k = 0\r\n\r\n        while i < len(L) and j < len(R):\r\n            if L[i] < R[j]:\r\n                arr[k] = L[i]\r\n                i += 1\r\n            else:\r\n                arr[k] = R[j]\r\n                j += 1\r\n            k += 1\r\n\r\n        while i < len(L):\r\n            arr[k] = L[i]\r\n            i += 1\r\n            k += 1\r\n\r\n        while j < len(R):\r\n            arr[k] = R[j]\r\n            j += 1\r\n            k += 1\r\n`;\r\n    const jsCode = `\r\nfunction mergeSort(array) {\r\n  const half = array.length / 2\r\n\r\n  if (array.length < 2){\r\n    return array\r\n  }\r\n\r\n  const left = array.splice(0, half)\r\n  return merge(mergeSort(left),mergeSort(array))\r\n}\r\n\r\nfunction merge(left, right) {\r\n    let arr = []\r\n\r\n    while (left.length && right.length) {\r\n        if (left[0] < right[0]) {\r\n            arr.push(left.shift())\r\n        } else {\r\n            arr.push(right.shift())\r\n        }\r\n    }\r\n\r\n    return [ ...arr, ...left, ...right ]\r\n}\r\n`;\r\n    const cppCode = `void merge(int *array, int l, int m, int r) {\r\n        int i, j, k, nl, nr;\r\n        nl = m-l+1; nr = r-m;\r\n        int larr[nl], rarr[nr];\r\n     \r\n        for(i = 0; i<nl; i++)\r\n           larr[i] = array[l+i];\r\n     \r\n        for(j = 0; j<nr; j++)\r\n           rarr[j] = array[m+1+j];\r\n     \r\n        i = 0; j = 0; k = l;\r\n     \r\n        while(i < nl && j<nr) {\r\n           if(larr[i] <= rarr[j]) {\r\n              array[k] = larr[i];\r\n              i++;\r\n           } else {\r\n              array[k] = rarr[j];\r\n              j++;\r\n           }\r\n           k++;\r\n        }\r\n        while(i<nl) {\r\n           array[k] = larr[i];\r\n           i++; k++;\r\n        }\r\n        while(j<nr) {\r\n           array[k] = rarr[j];\r\n           j++; k++;\r\n        }\r\n     }\r\n     \r\n     void mergeSort(int *array, int l, int r) {\r\n        int m;\r\n        if(l < r) {\r\n           int m = l+(r-l)/2;\r\n     \r\n           mergeSort(array, l, m);\r\n           mergeSort(array, m+1, r);\r\n           merge(array, l, m, r);\r\n        }\r\n     }`;\r\n\r\n    function handleCopyClick() {\r\n        const codeElement = codeRef.current;\r\n        if (codeElement) {\r\n            const range = document.createRange();\r\n            range.selectNode(codeElement);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n    }\r\n\r\n    function handleLanguageChange(event) {\r\n        setLanguage(event.target.value);\r\n    }\r\n\r\n    let code;\r\n    if (language === 'python') {\r\n        code = pythonCode;\r\n    } else if (language === 'javascript') {\r\n        code = jsCode;\r\n    } else if (language === 'cpp') {\r\n        code = cppCode;\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col >\r\n                    <Mergesort></Mergesort>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={6} className='code'>\r\n                    <div className=\"code-block\">\r\n                        <select value={language} onChange={handleLanguageChange}>\r\n                            <option value=\"python\">Python</option>\r\n                            <option value=\"javascript\">JavaScript</option>\r\n                            <option value=\"cpp\">C++</option>\r\n                        </select>\r\n                        <button onClick={handleCopyClick}>Copy</button>\r\n                        <pre ref={codeRef} className={`language-${language}`}>\r\n                            {code}\r\n                        </pre>\r\n                    </div>\r\n                </Col>\r\n                <Col md={6}>\r\n                    <div className=\"TextBlock\"  >\r\n                        <row>\r\n                            <div id=\"text-block\">\r\n                                <h2>Description</h2>\r\n                                <p>Merge Sort that divides the data structure recursively until the subsequences contain only one element. At this point, the subsequences get merged and ordered sequentially. To do so, the algorithm progressively builds the sorted sublist by adding each time the minimum element of the next two unsorted subsequences until there is only one sublist remaining. This will be the sorted data structure</p>\r\n                            </div>\r\n                        </row>\r\n                        <row>\r\n                            <div id=\"text-block-2\" >\r\n                                <h3>Complexity</h3>\r\n                                <p>Average:O(n × log n)</p>\r\n                                <p>Best:O(n × log n)</p>\r\n                                <p>Worst:O(n × log n)</p>\r\n                                <p>Space:O(n)</p>\r\n                            </div>\r\n                        </row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Container, Row, Col, Form, Card, Checkbox, InputGroup, FormControl, Nav } from 'react-bootstrap';\r\nimport Home from \"./Home.js\";\r\nimport './SortingVisualizer/SortingVisualizer.css';\r\nimport Bubblesort from './BubbleHome.js';\r\nimport Heapsort from './HeapHome.js';\r\nimport Insertionsort from './InsertionHome.js';\r\nimport Quicksort from './QuickHome.js';\r\nimport Mergesort from './MergeHome.js';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const [tablePage, setTablePage] = useState(0);\r\n\r\n    //const history = useHistory();\r\n    //const patientStates = useSelector(rMedSelectPatient);\r\n    //console.log(patientStates)\r\n\r\n    useEffect(() => {\r\n        fbasePage();\r\n    }, []);\r\n\r\n    const fbasePage = () => {\r\n        ReactDOM.render(\r\n            <Home />,\r\n            document.getElementById('managerView')\r\n        );\r\n    }\r\n\r\n    const Merge_page = () => {\r\n        ReactDOM.render(\r\n            <Mergesort />,\r\n            document.getElementById('managerView')\r\n        );\r\n    }\r\n    const Quick_page = () => {\r\n        ReactDOM.render(\r\n            <Quicksort />,\r\n            document.getElementById('managerView')\r\n        );\r\n    }\r\n    const Heap_page = () => {\r\n        ReactDOM.render(\r\n            <Heapsort />,\r\n            document.getElementById('managerView')\r\n        );\r\n    }\r\n    const Insertion_page = () => {\r\n        ReactDOM.render(\r\n            <Insertionsort />,\r\n            document.getElementById('managerView')\r\n        );\r\n    }\r\n    const Bubble_page = () => {\r\n        ReactDOM.render(\r\n            <Bubblesort />,\r\n            document.getElementById('managerView')\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col md=\"auto\">\r\n                    <Nav variant=\"tabs\" defaultActiveKey=\"baseData\" className=\"flex-row justify-content-center\" style={{ border: 'none', fontWeight: \"bold\" }} >\r\n                        <Nav.Link onClick={fbasePage}>Mainpage</Nav.Link>\r\n                        <Nav.Link onClick={Merge_page}>Merge Sort</Nav.Link>\r\n                        <Nav.Link onClick={Bubble_page}>Bubble Sort</Nav.Link>\r\n                        <Nav.Link onClick={Insertion_page}>Insertion Sort</Nav.Link>\r\n                        <Nav.Link onClick={Quick_page}>Quick Sort</Nav.Link>\r\n                        <Nav.Link onClick={Heap_page}>Heap Sort</Nav.Link>\r\n                    </Nav>\r\n                </Col>\r\n                <Col>\r\n                    <div id=\"managerView\"></div >\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Home from './Home.js';\nimport Main from './Main.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));//Reacr 程式進入點\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
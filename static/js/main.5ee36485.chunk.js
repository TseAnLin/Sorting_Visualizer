(this["webpackJsonpsorting-visualizer"]=this["webpackJsonpsorting-visualizer"]||[]).push([[0],{16:function(e,t,n){},18:function(e,t,n){},19:function(e,t,n){},24:function(e,t,n){e.exports=n(36)},29:function(e,t,n){},30:function(e,t,n){},36:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(15),o=n.n(l),i=(n(29),n(30),n(1)),c=n(9),s=n(10),u=n(13),m=n(11),h=n(14);function d(e){var t=[];if(e.length<=1)return e;var n=e.slice();return function e(t,n,a,r,l,o){if(n===a)return;var i=Math.floor((n+a)/2);e(r,n,i,t,l,!1);e(r,i+1,a,t,l,!1);!function(e,t,n,a,r,l,o){var i=t,c=t,s=n+1,u=0;for(;c<=n&&s<=a;)i>c?l.push([c+u,s,-1,1]):l.push([c,s,-1,1]),r[c]<=r[s]?(i>c?l.push([i,c+u,r[c],1]):l.push([i,c,r[c],1]),o?l.push([i,s,-1,2]):l.push([i,s,-1,0]),e[i++]=r[c++]):(u++,l.push([i,s,r[s],1]),o?l.push([i,s,-1,2]):l.push([i,s,-1,0]),e[i++]=r[s++]);for(;c<=n;)l.push([c+u,c+u,-1,1]),o?l.push([c+u,c+u,-1,2]):l.push([c+u,c+u,-1,0]),e[i++]=r[c++];for(;s<=a;)l.push([s,s,-1,1]),o?l.push([i,s,-1,2]):l.push([s,s,-1,0]),e[i++]=r[s++]}(t,n,i,a,r,l,o)}(e,0,e.length-1,n,t,!0),t}function g(e){var t=[];return e.length<=1?e:(function(e,t,n){for(;e>0;){for(var a=0;a<e;a++)n.push([a,a+1,1,t[a],t[a+1]]),n.push([a,a+1,2,t[a],t[a+1]]),t[a]>=t[a+1]?(n.push([a,a+1,2,t[a+1],t[a]]),n.push([a,a+1,1,t[a+1],t[a]]),p(t,a,a+1)):n.push([a,a+1,1,t[a],t[a+1]]);n.push([e,e,3,t[e],t[e]]),e--}n.push([e,e,3,t[e],t[e]])}(e.length-1,e,t),t)}function p(e,t,n){var a=e[n];e[n]=e[t],e[t]=a}function f(e){var t=[];if(e.length<=1)return e;!function e(t,n,a,r){if(!(a>=0&&r<t.length&&r-a>=1))return void n.push([a,a,3,t[a],t[a]]);var l=a,o=r,i=t[a];for(n.push([a,a,0,t[a],t[a]]);l!==o;){for(l!==a?n.push([l,o,2,t[l],t[o]]):n.push([o,o,2,t[o],t[o]]);t[o]>=i&&l<o;)n.push([o,o,1,t[o],t[o]]),o-=1,n.push([o,o,2,t[o],t[o]]);for(;t[l]<=i&&l<o;)l!==a&&n.push([l,l,1,t[l],t[l]]),l+=1,n.push([l,l,2,t[l],t[l]]);l<o&&(n.push([l,o,2,t[o],t[l]]),n.push([l,o,1,t[o],t[l]]),p(t,l,o))}n.push([a,l,2,i,t[l]]),n.push([a,l,2,t[l],i]),n.push([a,l,3,t[l],i]),t[a]=t[l],t[l]=i,e(t,n,a,l-1),e(t,n,l+1,r)}(e,t,0,e.length-1);for(var n=0;n<e.length;n++)t.push([n,e[n]]);return t}function y(e,t,n,a){var r,l=2*n+1,o=2*n+2;if(l<=a-1&&t[l]>=t[n]?(e.push([n,l]),e.push([n,l]),r=l):(e.push([n,n]),e.push([n,n]),r=n),o<=a-1&&t[r]<t[o]&&(e.pop(),e.pop(),e.push([n,o]),e.push([n,o]),r=o),r!==n){var i=[t[r],t[n]];t[n]=i[0],t[r]=i[1],e.push([n,t[n],r,t[r],0]),y(e,t,r,a)}else e.pop(),e.pop()}function v(e){var t=[];return e.length<=1?e:(function(e,t,n){for(var a=Math.floor((n-1)/2);a>=0;a--)y(e,t,a,n)}(t,e,e.length),function(e,t,n){for(var a=n-1;a>=0;a--){var r=[t[a],t[0]];if(t[0]=r[0],t[a]=r[1],e.push([0,a]),e.push([0,a]),e.push([0,t[0],a,t[a],1]),0===a)break;y(e,t,0,a)}}(t,e,e.length),t)}function b(e){var t=[];if(e.length<=1)return e;for(var n=0;n<e.length;n++){t.push([n,n,0]),t.push([n,n,0]),t.push([n,e[n]]);for(var a=e[n],r=n-1;a<e[r]&&r>=0;)e[r+1]=e[r],e[r]=0,r===n-1&&(t.pop(),t.push([r+1,0])),t.push([r,r,1]),t.push([r,r,1]),t.push([r,e[r],r+1,e[r+1]]),r--;e[r+1]=a,r+1!==n&&(t.push([r+1,r+1]),t.push([r+1,r+1]),t.push([r+1,a]))}return t}n(16);var E=100,k=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(u.a)(this,Object(m.a)(t).call(this,e))).state={array:[],numberOfArray:E},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){this.resetArray()}},{key:"resetArray",value:function(){for(var e=[],t=0;t<this.state.numberOfArray;t++)e.push(j(5,380));for(var n=document.getElementsByClassName("array-bar"),a=n.length,r=0;r<a;r++)n[r].style.backgroundColor="#14213D";this.setState({array:e})}},{key:"mergeSort",value:function(){for(var e=d(this.state.array),t=function(t){var n=document.getElementsByClassName("array-bar"),a=Object(i.a)(e[t],4),r=a[0],l=a[1],o=a[2],c=a[3];if(-1===o){var s=n[r].style,u=n[l].style;1===c?setTimeout((function(){s.backgroundColor="#FCA311",u.backgroundColor="#FCA311"}),10*t):0===c?setTimeout((function(){s.backgroundColor="#14213D",u.backgroundColor="#14213D"}),10*t):2===c&&setTimeout((function(){u.backgroundColor="#14213D",s.backgroundColor="#921AFF"}),10*t)}else setTimeout((function(){for(var e=l;e>r;e--){var t=n[e-1].style;n[e].style.height=t.height}var a=n[r].style,i=n[l].style;a.backgroundColor="#FCA311",a.height="".concat(o,"px"),i.backgroundColor="#14213D"}),10*t)},n=0;n<e.length;n++)t(n)}},{key:"testSortingAlgorithms",value:function(){for(var e=0;e<100;e++){for(var t=[],n=j(1,1e3),a=0;a<n;a++)t.push(j(-1e3,1e3));var r=t.slice().sort((function(e,t){return e-t})),l=d(t.slice());console.log(C(r,l))}}},{key:"onChange",value:function(e){this.setState({numberOfArray:e})}},{key:"render",value:function(){var e=this,t=this.state.array;return r.a.createElement("div",{className:"array-container"},r.a.createElement("div",{className:"button"},r.a.createElement("p",null,this.state.numberOfArray),r.a.createElement("input",{type:"range",min:"10",max:"100",onChange:function(t){return e.onChange(t.target.value)}}),r.a.createElement("button",{className:"btn",id:"sort",onClick:function(){return e.mergeSort()}},"Sort"),r.a.createElement("button",{className:"btn",id:"reset",onClick:function(){return e.resetArray()}},"Reset")),r.a.createElement("div",{className:"leetcode-container"},r.a.createElement("a",{href:"https://leetcode.com/problemset/all/",target:"_blank",rel:"noreferrer"},r.a.createElement("button",{className:"leetcode-button"},"Practice in Leetcode"))),r.a.createElement("p",{class:"title"},"Main Page"),r.a.createElement("div",{class:"bar",style:{width:"".concat(900+2*E,"px")}},t.map((function(e,t){return r.a.createElement("div",{className:"array-bar",key:t,style:{backgroundColor:"#14213D",height:"".concat(e,"px"),width:"".concat(900/E,"px")}})}))))}}]),t}(r.a.Component);function j(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function C(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var w=n(12),S=n(5),O=n(3);n(17),n(18),n(19);var x=function(){var e,t=Object(a.useState)("python"),n=Object(i.a)(t,2),l=n[0],o=n[1],c=Object(a.useRef)(null);return"python"===l?e="type code hear":"javascript"===l?e="nothing here":"cpp"===l&&(e="go practice now"),r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,null,r.a.createElement(k,null))),r.a.createElement(S.a,null,r.a.createElement(O.a,{md:6,className:"code"},r.a.createElement("div",{className:"code-block"},r.a.createElement("select",{value:l,onChange:function(e){o(e.target.value)}},r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"cpp"},"C++")),r.a.createElement("button",{onClick:function(){var e=c.current;if(e){var t=document.createRange();t.selectNode(e),window.getSelection().removeAllRanges(),window.getSelection().addRange(t),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},"Copy"),r.a.createElement("pre",{ref:c,className:"language-".concat(l)},e))),r.a.createElement(O.a,{md:6},r.a.createElement("div",{className:"TextBlock"},r.a.createElement(S.a,null,r.a.createElement("div",{id:"text-block"},r.a.createElement("h2",null,"Description"),r.a.createElement("p",null,"Merge Sort that divides the data structure recursively until the subsequences contain only one element. At this point, the subsequences get merged and ordered sequentially. To do so, the algorithm progressively builds the sorted sublist by adding each time the minimum element of the next two unsorted subsequences until there is only one sublist remaining. This will be the sorted data structure"))),r.a.createElement(S.a,null,r.a.createElement("div",{id:"text-block-2"},r.a.createElement("h3",null,"Complexity"),r.a.createElement("p",null,"Average:O(n \xd7 log n)"),r.a.createElement("p",null,"Best:O(n \xd7 log n)"),r.a.createElement("p",null,"Worst:O(n \xd7 log n)"),r.a.createElement("p",null,"Space:O(n)")))))),r.a.createElement("br",null))},A=(n(32),n(38)),N=100,R=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(u.a)(this,Object(m.a)(t).call(this,e))).state={array:[],numberOfArray:N},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){this.resetArray()}},{key:"resetArray",value:function(){for(var e=[],t=0;t<this.state.numberOfArray;t++)e.push(F(5,380));for(var n=document.getElementsByClassName("array-bar"),a=n.length,r=0;r<a;r++)n[r].style.backgroundColor="#cbaa70";this.setState({array:e})}},{key:"bubbleSort",value:function(){for(var e=g(this.state.array),t=function(t){var n=document.getElementsByClassName("array-bar"),a=Object(i.a)(e[t],5),r=a[0],l=a[1],o=a[2],c=a[3],s=a[4],u=n[r].style,m=n[l].style;1===o?setTimeout((function(){u.backgroundColor="#cbaa70",m.backgroundColor="#cbaa70",u.height="".concat(c,"px"),m.height="".concat(s,"px")}),3*t):2===o?setTimeout((function(){u.backgroundColor="#28FF28",m.backgroundColor="#28FF28",u.height="".concat(c,"px"),m.height="".concat(s,"px")}),3*t):3===o&&setTimeout((function(){u.backgroundColor="#921AFF",u.height="".concat(c,"px")}),3*t)},n=0;n<e.length;n++)t(n)}},{key:"testSortingAlgorithms",value:function(){for(var e=0;e<100;e++){for(var t=[],n=F(1,1e3),a=0;a<n;a++)t.push(F(-1e3,1e3));var r=t.slice().sort((function(e,t){return e-t})),l=g(t.slice());console.log(B(r,l))}}},{key:"onChange",value:function(e){this.setState({numberOfArray:e})}},{key:"render",value:function(){var e=this,t=this.state.array;return r.a.createElement("div",{className:"array-container"},r.a.createElement("div",{class:"button"},r.a.createElement("p",null,this.state.numberOfArray),r.a.createElement("input",{type:"range",min:"10",max:"100",onChange:function(t){return e.onChange(t.target.value)}}),r.a.createElement("button",{class:"btn",id:"sort",onClick:function(){return e.bubbleSort()}},"Sort"),r.a.createElement("button",{class:"btn",id:"reset",onClick:function(){return e.resetArray()}},"Reset")),r.a.createElement("div",{className:"leetcode-container"},r.a.createElement("a",{href:"https://leetcode.com/problemset/all/",target:"_blank",rel:"noreferrer"},r.a.createElement("button",{className:"leetcode-button"},"Practice in Leetcode"))),r.a.createElement("p",{class:"title"},"Bubble Sort"),r.a.createElement("div",{class:"bar",style:{width:"".concat(900+2*N,"px")}},t.map((function(e,t){return r.a.createElement("div",{className:"array-bar",key:t,style:{backgroundColor:"#cbaa70",height:"".concat(e,"px"),width:"".concat(900/N,"px")}})}))))}}]),t}(r.a.Component);function F(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function B(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var T=function(){var e,t=Object(a.useState)("python"),n=Object(i.a)(t,2),l=n[0],o=n[1],c=Object(a.useRef)(null);return"python"===l?e="def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n":"javascript"===l?e="\n    \nfunction bubbleSort(arr) {\n    for(var i = 0; i < arr.length; i++) {\n        for(var j = 0; j < ( arr.length - i -1 ); j++) {\n            if(arr[j] > arr[j+1]) {\n              var temp = arr[j]\n              arr[j] = arr[j + 1]\n              arr[j+1] = temp\n            }\n        }\n    }\n}\n":"cpp"===l&&(e="\n    void swap(int *xp, int *yp) {\n        int temp = *xp;\n        *xp = *yp;\n        *yp = temp;\n    }\n    \n    \n    void bubbleSort(int arr[], int n) {\n        int i, j;\n        for (i = 0; i < n-1; i++)\n            for (j = 0; j < n-i-1; j++)\n                if (arr[j] > arr[j+1])\n                    swap(&arr[j], &arr[j+1]);\n    }\n    }"),r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,null,r.a.createElement(R,null))),r.a.createElement(S.a,null,r.a.createElement(O.a,{md:6,className:"code"},r.a.createElement("div",{className:"code-block"},r.a.createElement("select",{value:l,onChange:function(e){o(e.target.value)}},r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"cpp"},"C++")),r.a.createElement("button",{onClick:function(){var e=c.current;if(e){var t=document.createRange();t.selectNode(e),window.getSelection().removeAllRanges(),window.getSelection().addRange(t),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},"Copy"),r.a.createElement("pre",{ref:c,className:"language-".concat(l)},e))),r.a.createElement(O.a,{md:6},r.a.createElement("div",{className:"TextBlock"},r.a.createElement("row",null,r.a.createElement("div",{id:"text-block"},r.a.createElement("h2",null,"Description"),r.a.createElement("p",null,"Bubblesort that divides the data structure recursively until the subsequences contain only one element. At this point, the subsequences get merged and ordered sequentially. To do so, the algorithm progressively builds the sorted sublist by adding each time the minimum element of the next two unsorted subsequences until there is only one sublist remaining. This will be the sorted data structure"))),r.a.createElement("row",null,r.a.createElement("div",{id:"text-block-2"},r.a.createElement("h3",null,"Complexity"),r.a.createElement("p",null,"Average:O(n \xd7  n)"),r.a.createElement("p",null,"Best:O(n )"),r.a.createElement("p",null,"Worst:O(n n \xd7  n)"),r.a.createElement("p",null,"Space:O(1)")))))),r.a.createElement("br",null))},M=100,q=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(u.a)(this,Object(m.a)(t).call(this,e))).state={array:[],numberOfArray:M},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){this.resetArray()}},{key:"resetArray",value:function(){for(var e=[],t=0;t<this.state.numberOfArray;t++)e.push(D(5,380));for(var n=document.getElementsByClassName("array-bar"),a=n.length,r=0;r<a;r++)n[r].style.backgroundColor="#cbaa70";this.setState({array:e})}},{key:"heapSort",value:function(){for(var e=v(this.state.array),t=0;t<e.length;t++){var n=document.getElementsByClassName("array-bar");t%3!==2?function(){var a=Object(i.a)(e[t],2),r=a[0],l=a[1],o=n[r].style,c=n[l].style,s=t%3===0?"#28FF28":"#cbaa70";setTimeout((function(){o.backgroundColor=s,c.backgroundColor=s}),5*t)}():function(){var a=Object(i.a)(e[t],5),r=a[0],l=a[1],o=a[2],c=a[3],s=a[4],u=n[r].style,m=n[o].style;setTimeout((function(){u.height="".concat(l,"px"),m.height="".concat(c,"px"),s&&(m.backgroundColor="#921AFF")}),5*t)}()}}},{key:"testSortingAlgorithms",value:function(){for(var e=0;e<100;e++){for(var t=[],n=D(1,1e3),a=0;a<n;a++)t.push(D(-1e3,1e3));var r=t.slice().sort((function(e,t){return e-t})),l=v(t.slice());console.log(L(r,l))}}},{key:"onChange",value:function(e){this.setState({numberOfArray:e})}},{key:"render",value:function(){var e=this,t=this.state.array;return r.a.createElement("div",{className:"array-container"},r.a.createElement("div",{class:"button"},r.a.createElement("p",null,this.state.numberOfArray),r.a.createElement("input",{type:"range",min:"10",max:"100",onChange:function(t){return e.onChange(t.target.value)}}),r.a.createElement("button",{class:"btn",id:"sort",onClick:function(){return e.heapSort()}},"Sort"),r.a.createElement("button",{class:"btn",id:"reset",onClick:function(){return e.resetArray()}},"Reset")),r.a.createElement("div",{className:"leetcode-container"},r.a.createElement("a",{href:"https://leetcode.com/problems/sort-an-array/description/",target:"_blank",rel:"noreferrer"},r.a.createElement("button",{className:"leetcode-button"},"Practice in Leetcode"))),r.a.createElement("p",{class:"title"},"Heap Sort"),r.a.createElement("div",{class:"bar",style:{width:"".concat(900+2*M,"px")}},t.map((function(e,t){return r.a.createElement("div",{className:"array-bar",key:t,style:{backgroundColor:"#cbaa70",height:"".concat(e,"px"),width:"".concat(900/M,"px")}})}))))}}]),t}(r.a.Component);function D(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function L(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var P=function(){var e,t=Object(a.useState)("python"),n=Object(i.a)(t,2),l=n[0],o=n[1],c=Object(a.useRef)(null);return"python"===l?e="\n    def heapify(arr, n, i):\n      largest = i\n      l = 2 * i + 1\n      r = 2 * i + 2\n    \n      if l < n and arr[i] < arr[l]:\n          largest = l\n    \n      if r < n and arr[largest] < arr[r]:\n          largest = r\n    \n      if largest != i:\n          arr[i], arr[largest] = arr[largest], arr[i]\n          heapify(arr, n, largest)\n    \n    \n    def heapSort(arr):\n      n = len(arr)\n    \n      for i in range(n//2, -1, -1):\n          heapify(arr, n, i)\n    \n      for i in range(n-1, 0, -1):\n          arr[i], arr[0] = arr[0], arr[i]\n    \n          heapify(arr, i, 0)\n    \n":"javascript"===l?e="\n\n    function heapSort(array) {\n        let size = array.length\n      \n        for (let i = Math.floor(size / 2 - 1); i >= 0; i--)\n          heapify(array, size, i)\n      \n        for (let i = size - 1; i >= 0; i--) {\n          let temp = array[0]\n          array[0] = array[i]\n          array[i] = temp\n          heapify(array, i, 0)\n        }\n      }\n      \n      function heapify(array, size, i) {\n        let max = i\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n      \n        if (left < size && array[left] > array[max])\n          max = left\n      \n        if (right < size && array[right] > array[max])\n          max = right\n      \n        if (max != i) {\n          let temp = array[i]\n          array[i] = array[max]\n          array[max] = temp\n      \n          heapify(array, size, max)\n        }\n      }\n      \n":"cpp"===l&&(e="void heapify(int arr[], int n, int i) {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n    \n        if (left < n && arr[left] > arr[largest])\n          largest = left;\n    \n        if (right < n && arr[right] > arr[largest])\n          largest = right;\n    \n        if (largest != i) {\n          swap(arr[i], arr[largest]);\n          heapify(arr, n, largest);\n        }\n    }\n    \n    void heapSort(int arr[], int n) {\n        for (int i = n / 2 - 1; i >= 0; i--)\n          heapify(arr, n, i);\n    \n        for (int i = n - 1; i >= 0; i--) {\n          swap(arr[0], arr[i]);\n          heapify(arr, i, 0);\n        }\n    }\n    "),r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,null,r.a.createElement(q,null))),r.a.createElement(S.a,null,r.a.createElement(O.a,{md:6,className:"code"},r.a.createElement("div",{className:"code-block"},r.a.createElement("select",{value:l,onChange:function(e){o(e.target.value)}},r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"cpp"},"C++")),r.a.createElement("button",{onClick:function(){var e=c.current;if(e){var t=document.createRange();t.selectNode(e),window.getSelection().removeAllRanges(),window.getSelection().addRange(t),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},"Copy"),r.a.createElement("pre",{ref:c,className:"language-".concat(l)},e))),r.a.createElement(O.a,{md:6},r.a.createElement("div",{className:"TextBlock"},r.a.createElement("row",null,r.a.createElement("div",{id:"text-block"},r.a.createElement("h2",null,"Description"),r.a.createElement("p",null,"Heap Sort is an in-place iterative sorting algorithm based on auxiliary data structures called heap. It's less efficient than algorithm with the same time complexity and it's not suitable for data structures with few elements. The heap is a data structure representable as a binary tree, where each node has a value bigger or equal to its children. Consequently, the root will hold the maximum value."))),r.a.createElement("row",null,r.a.createElement("div",{id:"text-block-2"},r.a.createElement("h3",null,"Complexity"),r.a.createElement("p",null,"Average:O(n \xd7 n)"),r.a.createElement("p",null,"Best:O(n \xd7 log n )"),r.a.createElement("p",null,"Worst:O(n \xd7 log n)"),r.a.createElement("p",null,"Space:O(1)")))))),r.a.createElement("br",null))},I=100,z=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(u.a)(this,Object(m.a)(t).call(this,e))).state={array:[],numberOfArray:I},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){this.resetArray()}},{key:"resetArray",value:function(){for(var e=[],t=0;t<this.state.numberOfArray;t++)e.push(W(5,380));for(var n=document.getElementsByClassName("array-bar"),a=n.length,r=0;r<a;r++)n[r].style.backgroundColor="#cbaa70";this.setState({array:e})}},{key:"insertionSort",value:function(){for(var e=b(this.state.array),t=0;t<e.length;t++){var n=document.getElementsByClassName("array-bar");t%3!==2?function(){var a=Object(i.a)(e[t],3),r=a[0],l=(a[1],a[2]),o=n[r].style,c=t%3===0?"#28FF28":1===l?"#921AFF":"#cbaa70";setTimeout((function(){o.backgroundColor=c}),3*t)}():2===e[t].length?function(){var a=Object(i.a)(e[t],2),r=a[0],l=a[1],o=n[r].style;setTimeout((function(){o.height="".concat(l,"px"),o.backgroundColor="#921AFF"}),3*t)}():function(){var a=Object(i.a)(e[t],4),r=a[0],l=a[1],o=a[2],c=a[3],s=n[r].style,u=n[o].style;setTimeout((function(){s.height="".concat(l,"px"),u.height="".concat(c,"px"),s.backgroundColor="#921AFF",u.backgroundColor="#921AFF"}),3*t)}()}}},{key:"testSortingAlgorithms",value:function(){for(var e=0;e<100;e++){for(var t=[],n=W(1,1e3),a=0;a<n;a++)t.push(W(-1e3,1e3));var r=t.slice().sort((function(e,t){return e-t})),l=b(t.slice());console.log(_(r,l))}}},{key:"onChange",value:function(e){this.setState({numberOfArray:e})}},{key:"render",value:function(){var e=this,t=this.state.array;return r.a.createElement("div",{className:"array-container"},r.a.createElement("div",{class:"button"},r.a.createElement("p",null,this.state.numberOfArray),r.a.createElement("input",{type:"range",min:"10",max:"100",onChange:function(t){return e.onChange(t.target.value)}}),r.a.createElement("button",{class:"btn",id:"sort",onClick:function(){return e.insertionSort()}},"Sort"),r.a.createElement("button",{class:"btn",id:"reset",onClick:function(){return e.resetArray()}},"Reset")),r.a.createElement("div",{className:"leetcode-container"},r.a.createElement("a",{href:"https://leetcode.com/problems/insertion-sort-list/",target:"_blank",rel:"noreferrer"},r.a.createElement("button",{className:"leetcode-button"},"Practice in Leetcode"))),r.a.createElement("p",{class:"title"},"Insertion Sort"),r.a.createElement("div",{class:"bar",style:{width:"".concat(900+2*I,"px")}},t.map((function(e,t){return r.a.createElement("div",{className:"array-bar",key:t,style:{backgroundColor:"#cbaa70",height:"".concat(e,"px"),width:"".concat(900/I,"px")}})}))))}}]),t}(r.a.Component);function W(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function _(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var J=function(){var e,t=Object(a.useState)("python"),n=Object(i.a)(t,2),l=n[0],o=n[1],c=Object(a.useRef)(null);return"python"===l?e="\n    def insertionSort(arr):\n        for i in range(1, len(arr)):\n            key = arr[i]\n            j = i-1\n            while j >= 0 and key < arr[j] :\n                    arr[j + 1] = arr[j]\n                    j -= 1\n            arr[j + 1] = key\n":"javascript"===l?e="\n    function insertionSort(arr, n)\n    {\n        let i, key, j;\n        for (i = 1; i < n; i++)\n        {\n            key = arr[i];\n            j = i - 1;\n    \n            while (j >= 0 && arr[j] > key)\n            {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n            arr[j + 1] = key;\n        }\n    }\n":"cpp"===l&&(e="void insertionSort(int arr[], int n)\n    {\n        int i, key, j;\n        for (i = 1; i < n; i++)\n        {\n            key = arr[i];\n            j = i - 1;\n    \n            while (j >= 0 && arr[j] > key)\n            {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n            arr[j + 1] = key;\n        }\n    }"),r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,null,r.a.createElement(z,null))),r.a.createElement(S.a,null,r.a.createElement(O.a,{md:6,className:"code"},r.a.createElement("div",{className:"code-block"},r.a.createElement("select",{value:l,onChange:function(e){o(e.target.value)}},r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"cpp"},"C++")),r.a.createElement("button",{onClick:function(){var e=c.current;if(e){var t=document.createRange();t.selectNode(e),window.getSelection().removeAllRanges(),window.getSelection().addRange(t),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},"Copy"),r.a.createElement("pre",{ref:c,className:"language-".concat(l)},e))),r.a.createElement(O.a,{md:6},r.a.createElement("div",{className:"TextBlock"},r.a.createElement("row",null,r.a.createElement("div",{id:"text-block"},r.a.createElement("h2",null,"Description"),r.a.createElement("p",null,"Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It's less performant than advanced sorting algorithms, but it can still have some advantages: it's really easy to implement and it's efficient on small data structures almost sorted"))),r.a.createElement("row",null,r.a.createElement("div",{id:"text-block-2"},r.a.createElement("h3",null,"Complexity"),r.a.createElement("p",null,"Average:O(n\xd7n)"),r.a.createElement("p",null,"Best:O(n)"),r.a.createElement("p",null,"Worst:O(n \xd7  n)"),r.a.createElement("p",null,"Space:O(1)")))))),r.a.createElement("br",null))},V=100,H=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(u.a)(this,Object(m.a)(t).call(this,e))).state={array:[],numberOfArray:V},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){this.resetArray()}},{key:"resetArray",value:function(){for(var e=[],t=0;t<this.state.numberOfArray;t++)e.push(Q(5,380));for(var n=document.getElementsByClassName("array-bar"),a=n.length,r=0;r<a;r++)n[r].style.backgroundColor="#cbaa70";this.setState({array:e})}},{key:"quickSort",value:function(){for(var e=f(this.state.array),t=function(t){if(void 0===e[t][3])return"break";var n=document.getElementsByClassName("array-bar"),a=Object(i.a)(e[t],5),r=a[0],l=a[1],o=a[2],c=a[3],s=a[4],u=n[r].style,m=n[l].style;0===o?setTimeout((function(){u.backgroundColor="#F9F900",u.height="".concat(c,"px")}),5*t):1===o?setTimeout((function(){u.backgroundColor="#cbaa70",m.backgroundColor="#cbaa70",u.height="".concat(c,"px"),m.height="".concat(s,"px")}),5*t):2===o?setTimeout((function(){u.backgroundColor="#28FF28",m.backgroundColor="#28FF28",u.height="".concat(c,"px"),m.height="".concat(s,"px")}),5*t):3===o&&setTimeout((function(){u.backgroundColor="#cbaa70",m.backgroundColor="#921AFF",u.height="".concat(c,"px"),m.height="".concat(s,"px")}),5*t)},n=0;n<e.length;n++){if("break"===t(n))break}}},{key:"testSortingAlgorithms",value:function(){for(var e=0;e<100;e++){for(var t=[],n=Q(1,1e3),a=0;a<n;a++)t.push(Q(-1e3,1e3));var r=t.slice().sort((function(e,t){return e-t})),l=f(t.slice());console.log(K(r,l))}}},{key:"onChange",value:function(e){this.setState({numberOfArray:e})}},{key:"render",value:function(){var e=this,t=this.state.array;return r.a.createElement("div",{className:"array-container"},r.a.createElement("div",{class:"button"},r.a.createElement("p",null,this.state.numberOfArray),r.a.createElement("input",{type:"range",min:"10",max:"100",onChange:function(t){return e.onChange(t.target.value)}}),r.a.createElement("button",{class:"btn",id:"sort",onClick:function(){return e.quickSort()}},"Sort"),r.a.createElement("button",{class:"btn",id:"reset",onClick:function(){return e.resetArray()}},"Reset")),r.a.createElement("div",{className:"leetcode-container"},r.a.createElement("a",{href:"https://leetcode.com/problems/sort-an-array/description/",target:"_blank",rel:"noreferrer"},r.a.createElement("button",{className:"leetcode-button"},"Practice in Leetcode"))),r.a.createElement("p",{class:"title"},"Quick Sort"),r.a.createElement("div",{class:"bar",style:{width:"".concat(900+2*V,"px")}},t.map((function(e,t){return r.a.createElement("div",{className:"array-bar",key:t,style:{backgroundColor:"#cbaa70",height:"".concat(e,"px"),width:"".concat(900/V,"px")}})}))))}}]),t}(r.a.Component);function Q(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function K(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var $=function(){var e,t=Object(a.useState)("python"),n=Object(i.a)(t,2),l=n[0],o=n[1],c=Object(a.useRef)(null);return"python"===l?e="def partition(array, start, end):\n    pivot = array[start]\n    low = start + 1\n    high = end\n\n    while True:\n        while low <= high and array[high] >= pivot:\n            high = high - 1\n\n        while low <= high and array[low] <= pivot:\n            low = low + 1\n\n        if low <= high:\n            array[low], array[high] = array[high], array[low]\n        else:\n            break\n\n    array[start], array[high] = array[high], array[start]\n\n    return high\n\ndef quick_sort(array, start, end):\n    if start >= end:\n        return\n\n    p = partition(array, start, end)\n    quick_sort(array, start, p-1)\n    quick_sort(array, p+1, end)\n":"javascript"===l?e="\n    function quickSort(array, start, end) {\n        if (start === undefined) {\n          start = 0;\n          end = array.length - 1;\n        } else if (start >= end) {\n          return array;\n        }\n        var rStart = start, rEnd = end;\n        var pivot = array[Math.floor(Math.random() * (end - start + 1) + start)];\n        while (start < end) {\n          while (array[start] <= pivot) start++;\n          while (array[end] > pivot) end--;\n          if (start < end) {\n            var temp = array[start];\n            array[start] = array[end];\n            array[end] = temp;\n          }\n        }\n        quickSort(array, rStart, start - 1);\n        quickSort(array, start, rEnd);\n      }\n":"cpp"===l&&(e="void swap(int* a, int* b)\n    {\n        int t = *a;\n        *a = *b;\n        *b = t;\n    }\n    \n    int partition (int arr[], int low, int high)\n    {\n        int pivot = arr[high];\n        int i = (low - 1);\n    \n        for (int j = low; j <= high- 1; j++)\n        {\n            if (arr[j] <= pivot)\n            {\n                i++;\n                swap(&arr[i], &arr[j]);\n            }\n        }\n        swap(&arr[i + 1], &arr[high]);\n        return (i + 1);\n    }\n    \n    void quickSort(int arr[], int low, int high)\n    {\n        if (low < high)\n        {\n            int pivot = partition(arr, low, high);\n    \n            quickSort(arr, low, pivot - 1);\n            quickSort(arr, pivot + 1, high);\n        }\n    }"),r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,null,r.a.createElement(H,null))),r.a.createElement(S.a,null,r.a.createElement(O.a,{md:6,className:"code"},r.a.createElement("div",{className:"code-block"},r.a.createElement("select",{value:l,onChange:function(e){o(e.target.value)}},r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"cpp"},"C++")),r.a.createElement("button",{onClick:function(){var e=c.current;if(e){var t=document.createRange();t.selectNode(e),window.getSelection().removeAllRanges(),window.getSelection().addRange(t),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},"Copy"),r.a.createElement("pre",{ref:c,className:"language-".concat(l)},e))),r.a.createElement(O.a,{md:6},r.a.createElement("div",{className:"TextBlock"},r.a.createElement("row",null,r.a.createElement("div",{id:"text-block"},r.a.createElement("h2",null,"Description"),r.a.createElement("p",null,"Quick Sort is a sorting algorithm based on splitting the data structure in smaller partitions and sort them recursively until the data structure is sorted. This division in partitions is done based on an element, called pivot: all the elements bigger than the pivot get placed on the right side of the structure, the smaller ones to the left, creating two partitions. Next, this procedure gets applied recursively to the two partitions and so on."))),r.a.createElement("row",null,r.a.createElement("div",{id:"text-block-2"},r.a.createElement("h3",null,"Complexity"),r.a.createElement("p",null,"Average:O(n \xd7 log n)"),r.a.createElement("p",null,"Best:O(n \xd7 log n)"),r.a.createElement("p",null,"Worst:O(n \xd7  n)"),r.a.createElement("p",null,"Space:O(n)")))))),r.a.createElement("br",null))},G=100,U=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(u.a)(this,Object(m.a)(t).call(this,e))).state={array:[],numberOfArray:G},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:"componentDidMount",value:function(){this.resetArray()}},{key:"resetArray",value:function(){for(var e=[],t=0;t<this.state.numberOfArray;t++)e.push(X(5,380));for(var n=document.getElementsByClassName("array-bar"),a=n.length,r=0;r<a;r++)n[r].style.backgroundColor="#cbaa70";this.setState({array:e})}},{key:"mergeSort",value:function(){for(var e=d(this.state.array),t=function(t){var n=document.getElementsByClassName("array-bar"),a=Object(i.a)(e[t],4),r=a[0],l=a[1],o=a[2],c=a[3];if(-1===o){var s=n[r].style,u=n[l].style;1===c?setTimeout((function(){s.backgroundColor="#28FF28",u.backgroundColor="#28FF28"}),5*t):0===c?setTimeout((function(){s.backgroundColor="#cbaa70",u.backgroundColor="#cbaa70"}),5*t):2===c&&setTimeout((function(){u.backgroundColor="#cbaa70",s.backgroundColor="#921AFF"}),5*t)}else setTimeout((function(){for(var e=l;e>r;e--){var t=n[e-1].style;n[e].style.height=t.height}var a=n[r].style,i=n[l].style;a.backgroundColor="#28FF28",a.height="".concat(o,"px"),i.backgroundColor="#cbaa70"}),5*t)},n=0;n<e.length;n++)t(n)}},{key:"testSortingAlgorithms",value:function(){for(var e=0;e<100;e++){for(var t=[],n=X(1,1e3),a=0;a<n;a++)t.push(X(-1e3,1e3));var r=t.slice().sort((function(e,t){return e-t})),l=d(t.slice());console.log(Y(r,l))}}},{key:"onChange",value:function(e){this.setState({numberOfArray:e})}},{key:"render",value:function(){var e=this,t=this.state.array;return r.a.createElement("div",{className:"array-container"},r.a.createElement("div",{class:"button"},r.a.createElement("p",null,this.state.numberOfArray),r.a.createElement("input",{type:"range",min:"10",max:"100",onChange:function(t){return e.onChange(t.target.value)}}),r.a.createElement("button",{class:"btn",id:"sort",onClick:function(){return e.mergeSort()}},"Sort"),r.a.createElement("button",{class:"btn",id:"reset",onClick:function(){return e.resetArray()}},"Reset")),r.a.createElement("div",{className:"leetcode-container"},r.a.createElement("a",{href:"https://leetcode.com/tag/merge-sort/",target:"_blank",rel:"noreferrer"},r.a.createElement("button",{className:"leetcode-button"},"Practice in Leetcode"))),r.a.createElement("p",{class:"title"},"Merge Sort"),r.a.createElement("div",{class:"bar",style:{width:"".concat(900+2*G,"px")}},t.map((function(e,t){return r.a.createElement("div",{className:"array-bar",key:t,style:{backgroundColor:"#cbaa70",height:"".concat(e,"px"),width:"".concat(900/G,"px")}})}))))}}]),t}(r.a.Component);function X(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function Y(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var Z=function(){var e,t=Object(a.useState)("python"),n=Object(i.a)(t,2),l=n[0],o=n[1],c=Object(a.useRef)(null);return"python"===l?e="def mergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        mergeSort(L)\n        mergeSort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n":"javascript"===l?e="\nfunction mergeSort(array) {\n  const half = array.length / 2\n\n  if (array.length < 2){\n    return array\n  }\n\n  const left = array.splice(0, half)\n  return merge(mergeSort(left),mergeSort(array))\n}\n\nfunction merge(left, right) {\n    let arr = []\n\n    while (left.length && right.length) {\n        if (left[0] < right[0]) {\n            arr.push(left.shift())\n        } else {\n            arr.push(right.shift())\n        }\n    }\n\n    return [ ...arr, ...left, ...right ]\n}\n":"cpp"===l&&(e="void merge(int *array, int l, int m, int r) {\n        int i, j, k, nl, nr;\n        nl = m-l+1; nr = r-m;\n        int larr[nl], rarr[nr];\n     \n        for(i = 0; i<nl; i++)\n           larr[i] = array[l+i];\n     \n        for(j = 0; j<nr; j++)\n           rarr[j] = array[m+1+j];\n     \n        i = 0; j = 0; k = l;\n     \n        while(i < nl && j<nr) {\n           if(larr[i] <= rarr[j]) {\n              array[k] = larr[i];\n              i++;\n           } else {\n              array[k] = rarr[j];\n              j++;\n           }\n           k++;\n        }\n        while(i<nl) {\n           array[k] = larr[i];\n           i++; k++;\n        }\n        while(j<nr) {\n           array[k] = rarr[j];\n           j++; k++;\n        }\n     }\n     \n     void mergeSort(int *array, int l, int r) {\n        int m;\n        if(l < r) {\n           int m = l+(r-l)/2;\n     \n           mergeSort(array, l, m);\n           mergeSort(array, m+1, r);\n           merge(array, l, m, r);\n        }\n     }"),r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,null,r.a.createElement(U,null))),r.a.createElement(S.a,null,r.a.createElement(O.a,{md:6,className:"code"},r.a.createElement("div",{className:"code-block"},r.a.createElement("select",{value:l,onChange:function(e){o(e.target.value)}},r.a.createElement("option",{value:"python"},"Python"),r.a.createElement("option",{value:"javascript"},"JavaScript"),r.a.createElement("option",{value:"cpp"},"C++")),r.a.createElement("button",{onClick:function(){var e=c.current;if(e){var t=document.createRange();t.selectNode(e),window.getSelection().removeAllRanges(),window.getSelection().addRange(t),document.execCommand("copy"),window.getSelection().removeAllRanges()}}},"Copy"),r.a.createElement("pre",{ref:c,className:"language-".concat(l)},e))),r.a.createElement(O.a,{md:6},r.a.createElement("div",{className:"TextBlock"},r.a.createElement("row",null,r.a.createElement("div",{id:"text-block"},r.a.createElement("h2",null,"Description"),r.a.createElement("p",null,"Merge Sort that divides the data structure recursively until the subsequences contain only one element. At this point, the subsequences get merged and ordered sequentially. To do so, the algorithm progressively builds the sorted sublist by adding each time the minimum element of the next two unsorted subsequences until there is only one sublist remaining. This will be the sorted data structure"))),r.a.createElement("row",null,r.a.createElement("div",{id:"text-block-2"},r.a.createElement("h3",null,"Complexity"),r.a.createElement("p",null,"Average:O(n \xd7 log n)"),r.a.createElement("p",null,"Best:O(n \xd7 log n)"),r.a.createElement("p",null,"Worst:O(n \xd7 log n)"),r.a.createElement("p",null,"Space:O(n)")))))),r.a.createElement("br",null))},ee=function(){var e=Object(a.useState)(0),t=Object(i.a)(e,2);t[0],t[1];Object(a.useEffect)((function(){n()}),[]);var n=function(){o.a.render(r.a.createElement(x,null),document.getElementById("managerView"))};return r.a.createElement(w.a,null,r.a.createElement(S.a,null,r.a.createElement(O.a,{md:"auto"},r.a.createElement(A.a,{variant:"tabs",defaultActiveKey:"baseData",className:"flex-row justify-content-center",style:{border:"none",fontWeight:"bold"}},r.a.createElement(A.a.Link,{onClick:n},"Mainpage"),r.a.createElement(A.a.Link,{onClick:function(){o.a.render(r.a.createElement(Z,null),document.getElementById("managerView"))}},"Merge Sort"),r.a.createElement(A.a.Link,{onClick:function(){o.a.render(r.a.createElement(T,null),document.getElementById("managerView"))}},"Bubble Sort"),r.a.createElement(A.a.Link,{onClick:function(){o.a.render(r.a.createElement(J,null),document.getElementById("managerView"))}},"Insertion Sort"),r.a.createElement(A.a.Link,{onClick:function(){o.a.render(r.a.createElement($,null),document.getElementById("managerView"))}},"Quick Sort"),r.a.createElement(A.a.Link,{onClick:function(){o.a.render(r.a.createElement(P,null),document.getElementById("managerView"))}},"Heap Sort"))),r.a.createElement(O.a,null,r.a.createElement("div",{id:"managerView"}))))};var te=function(){return r.a.createElement("div",{className:"App"},r.a.createElement(ee,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(te,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[24,1,2]]]);
//# sourceMappingURL=main.5ee36485.chunk.js.map